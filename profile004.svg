<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: wordcount02 Pages: 1 -->
<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<script type="text/ecmascript"><![CDATA[
/**
 *  SVGPan library 1.2.2
 * ======================
 *
 * Given an unique existing element with id "viewport" (or when missing, the
 * first g-element), including the library into any SVG adds the following
 * capabilities:
 *
 *  - Mouse panning
 *  - Mouse zooming (using the wheel)
 *  - Object dragging
 *
 * You can configure the behaviour of the pan/zoom/drag with the variables
 * listed in the CONFIGURATION section of this file.
 *
 * Known issues:
 *
 *  - Zooming (while panning) on Safari has still some issues
 *
 * Releases:
 *
 * 1.2.2, Tue Aug 30 17:21:56 CEST 2011, Andrea Leofreddi
 *	- Fixed viewBox on root tag (#7)
 *	- Improved zoom speed (#2)
 *
 * 1.2.1, Mon Jul  4 00:33:18 CEST 2011, Andrea Leofreddi
 *	- Fixed a regression with mouse wheel (now working on Firefox 5)
 *	- Working with viewBox attribute (#4)
 *	- Added "use strict;" and fixed resulting warnings (#5)
 *	- Added configuration variables, dragging is disabled by default (#3)
 *
 * 1.2, Sat Mar 20 08:42:50 GMT 2010, Zeng Xiaohui
 *	Fixed a bug with browser mouse handler interaction
 *
 * 1.1, Wed Feb  3 17:39:33 GMT 2010, Zeng Xiaohui
 *	Updated the zoom code to support the mouse wheel on Safari/Chrome
 *
 * 1.0, Andrea Leofreddi
 *	First release
 *
 * This code is licensed under the following BSD license:
 *
 * Copyright 2009-2017 Andrea Leofreddi <a.leofreddi@vleo.net>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Andrea Leofreddi.
 */

"use strict";

/// CONFIGURATION
/// ====>

var enablePan = 1; // 1 or 0: enable or disable panning (default enabled)
var enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)
var enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)
var zoomScale = 0.2; // Zoom sensitivity

/// <====
/// END OF CONFIGURATION

var root = document.documentElement;

var state = 'none', svgRoot = null, stateTarget, stateOrigin, stateTf;

setupHandlers(root);

/**
 * Register handlers
 */
function setupHandlers(root){
	setAttributes(root, {
		"onmouseup" : "handleMouseUp(evt)",
		"onmousedown" : "handleMouseDown(evt)",
		"onmousemove" : "handleMouseMove(evt)",
		//"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
	});

	if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
		window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
	else
		window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
}

/**
 * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.
 */
function getRoot(root) {
	if(svgRoot == null) {
		var r = root.getElementById("viewport") ? root.getElementById("viewport") : root.documentElement, t = r;

		while(t != root) {
			if(t.getAttribute("viewBox")) {
				setCTM(r, t.getCTM());

				t.removeAttribute("viewBox");
			}

			t = t.parentNode;
		}

		svgRoot = r;
	}

	return svgRoot;
}

/**
 * Instance an SVGPoint object with given event coordinates.
 */
function getEventPoint(evt) {
	var p = root.createSVGPoint();

	p.x = evt.clientX;
	p.y = evt.clientY;

	return p;
}

/**
 * Sets the current transform matrix of an element.
 */
function setCTM(element, matrix) {
	var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

	element.setAttribute("transform", s);
}

/**
 * Dumps a matrix to a string (useful for debug).
 */
function dumpMatrix(matrix) {
	var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

	return s;
}

/**
 * Sets attributes of an element.
 */
function setAttributes(element, attributes){
	for (var i in attributes)
		element.setAttributeNS(null, i, attributes[i]);
}

/**
 * Handle mouse wheel event.
 */
function handleMouseWheel(evt) {
	if(!enableZoom)
		return;

	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var delta;

	if(evt.wheelDelta)
		delta = evt.wheelDelta / 360; // Chrome/Safari
	else
		delta = evt.detail / -9; // Mozilla

	var z = Math.pow(1 + zoomScale, delta);

	var g = getRoot(svgDoc);
	
	var p = getEventPoint(evt);

	p = p.matrixTransform(g.getCTM().inverse());

	// Compute new scale matrix in current mouse position
	var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

        setCTM(g, g.getCTM().multiply(k));

	if(typeof(stateTf) == "undefined")
		stateTf = g.getCTM().inverse();

	stateTf = stateTf.multiply(k.inverse());
}

/**
 * Handle mouse move event.
 */
function handleMouseMove(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(state == 'pan' && enablePan) {
		// Pan mode
		var p = getEventPoint(evt).matrixTransform(stateTf);

		setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
	} else if(state == 'drag' && enableDrag) {
		// Drag mode
		var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

		setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

		stateOrigin = p;
	}
}

/**
 * Handle click event.
 */
function handleMouseDown(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(
		evt.target.tagName == "svg"
		|| !enableDrag // Pan anyway when drag is disabled and the user clicked on an element
	) {
		// Pan mode
		state = 'pan';

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	} else {
		// Drag mode
		state = 'drag';

		stateTarget = evt.target;

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	}
}

/**
 * Handle mouse button release event.
 */
function handleMouseUp(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	if(state == 'pan' || state == 'drag') {
		// Quit pan mode
		state = '';
	}
}
]]></script><g id="viewport" transform="scale(0.5,0.5) translate(0,0)"><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 670)">
<title>wordcount02</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-670 959.5,-670 959.5,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_L</title>
<polygon fill="none" stroke="black" points="8,-507 8,-658 512,-658 512,-507 8,-507"/>
</g>
<!-- File: wordcount02 -->
<g id="node1" class="node">
<title>File: wordcount02</title>
<g id="a_node1"><a xlink:title="wordcount02">
<polygon fill="#f8f8f8" stroke="black" points="504,-650 16,-650 16,-515 504,-515 504,-650"/>
<text text-anchor="start" x="24" y="-633.2" font-family="Times,serif" font-size="16.00">File: wordcount02</text>
<text text-anchor="start" x="24" y="-615.2" font-family="Times,serif" font-size="16.00">Type: cpu</text>
<text text-anchor="start" x="24" y="-597.2" font-family="Times,serif" font-size="16.00">Time: Mar 10, 2023 at 8:49am (UTC)</text>
<text text-anchor="start" x="24" y="-579.2" font-family="Times,serif" font-size="16.00">Duration: 302.22ms, Total samples = 80ms (26.47%)</text>
<text text-anchor="start" x="24" y="-561.2" font-family="Times,serif" font-size="16.00">Showing nodes accounting for 80ms, 100% of 80ms total</text>
<text text-anchor="start" x="24" y="-524.2" font-family="Times,serif" font-size="16.00">See https://git.io/JfYMW for how to read the graph</text>
</a>
</g>
</g>
<!-- N1 -->
<g id="node1" class="node">
<title>N1</title>
<g id="a_node1"><a xlink:title="main.main (80ms)">
<polygon fill="#edd5d5" stroke="#b20000" points="609.5,-464 522.5,-464 522.5,-428 609.5,-428 609.5,-464"/>
<text text-anchor="middle" x="566" y="-453.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="566" y="-444.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="566" y="-435.1" font-family="Times,serif" font-size="8.00">0 of 80ms (100%)</text>
</a>
</g>
</g>
<!-- N4 -->
<g id="node4" class="node">
<title>N4</title>
<g id="a_node4"><a xlink:title="main.readbyte (60ms)">
<polygon fill="#edd7d5" stroke="#b20e00" points="613.5,-346 518.5,-346 518.5,-310 613.5,-310 613.5,-346"/>
<text text-anchor="middle" x="566" y="-335.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="566" y="-326.1" font-family="Times,serif" font-size="8.00">readbyte</text>
<text text-anchor="middle" x="566" y="-317.1" font-family="Times,serif" font-size="8.00">0 of 60ms (75.00%)</text>
</a>
</g>
</g>
<!-- N1&#45;&gt;N4 -->
<g id="edge2" class="edge">
<title>N1&#45;&gt;N4</title>
<g id="a_edge2"><a xlink:title="main.main &#45;&gt; main.readbyte (60ms)">
<path fill="none" stroke="#b20e00" stroke-width="4" d="M566,-427.88C566,-409.04 566,-378.47 566,-356.3"/>
<polygon fill="#b20e00" stroke="#b20e00" stroke-width="4" points="569.5,-356.19 566,-346.19 562.5,-356.19 569.5,-356.19"/>
</a>
</g>
<g id="a_edge2&#45;label"><a xlink:title="main.main &#45;&gt; main.readbyte (60ms)">
<text text-anchor="middle" x="593.5" y="-398.8" font-family="Times,serif" font-size="14.00"> 60ms</text>
<text text-anchor="middle" x="593.5" y="-383.8" font-family="Times,serif" font-size="14.00"> (inline)</text>
</a>
</g>
</g>
<!-- N7 -->
<g id="node7" class="node">
<title>N7</title>
<g id="a_node7"><a xlink:title="unicode.IsLetter (10ms)">
<polygon fill="#ede5de" stroke="#b27642" points="784.5,-362 631.5,-362 631.5,-294 784.5,-294 784.5,-362"/>
<text text-anchor="middle" x="708" y="-343.6" font-family="Times,serif" font-size="18.00">unicode</text>
<text text-anchor="middle" x="708" y="-323.6" font-family="Times,serif" font-size="18.00">IsLetter</text>
<text text-anchor="middle" x="708" y="-303.6" font-family="Times,serif" font-size="18.00">10ms (12.50%)</text>
</a>
</g>
</g>
<!-- N1&#45;&gt;N7 -->
<g id="edge6" class="edge">
<title>N1&#45;&gt;N7</title>
<g id="a_edge6"><a xlink:title="main.main &#45;&gt; unicode.IsLetter (10ms)">
<path fill="none" stroke="#b27642" d="M597.83,-427.99C606.9,-422.65 616.59,-416.45 625,-410 640.77,-397.9 656.72,-383.09 670.37,-369.46"/>
<polygon fill="#b27642" stroke="#b27642" points="673.16,-371.6 677.7,-362.03 668.18,-366.69 673.16,-371.6"/>
</a>
</g>
<g id="a_edge6&#45;label"><a xlink:title="main.main &#45;&gt; unicode.IsLetter (10ms)">
<text text-anchor="middle" x="685.5" y="-398.8" font-family="Times,serif" font-size="14.00"> 10ms</text>
<text text-anchor="middle" x="685.5" y="-383.8" font-family="Times,serif" font-size="14.00"> (inline)</text>
</a>
</g>
</g>
<!-- N8 -->
<g id="node8" class="node">
<title>N8</title>
<g id="a_node8"><a xlink:title="unicode.IsSpace (10ms)">
<polygon fill="#ede5de" stroke="#b27642" points="955.5,-362 802.5,-362 802.5,-294 955.5,-294 955.5,-362"/>
<text text-anchor="middle" x="879" y="-343.6" font-family="Times,serif" font-size="18.00">unicode</text>
<text text-anchor="middle" x="879" y="-323.6" font-family="Times,serif" font-size="18.00">IsSpace</text>
<text text-anchor="middle" x="879" y="-303.6" font-family="Times,serif" font-size="18.00">10ms (12.50%)</text>
</a>
</g>
</g>
<!-- N1&#45;&gt;N8 -->
<g id="edge7" class="edge">
<title>N1&#45;&gt;N8</title>
<g id="a_edge7"><a xlink:title="main.main &#45;&gt; unicode.IsSpace (10ms)">
<path fill="none" stroke="#b27642" d="M609.74,-437.69C640.32,-431.9 681.81,-422.68 717,-410 749.3,-398.37 783.52,-381.92 812.14,-366.89"/>
<polygon fill="#b27642" stroke="#b27642" points="814.04,-369.84 821.23,-362.06 810.75,-363.66 814.04,-369.84"/>
</a>
</g>
<g id="a_edge7&#45;label"><a xlink:title="main.main &#45;&gt; unicode.IsSpace (10ms)">
<text text-anchor="middle" x="807" y="-391.3" font-family="Times,serif" font-size="14.00"> 10ms</text>
</a>
</g>
</g>
<!-- N2 -->
<g id="node2" class="node">
<title>N2</title>
<g id="a_node2"><a xlink:title="runtime.main (80ms)">
<polygon fill="#edd5d5" stroke="#b20000" points="609.5,-600.5 522.5,-600.5 522.5,-564.5 609.5,-564.5 609.5,-600.5"/>
<text text-anchor="middle" x="566" y="-589.6" font-family="Times,serif" font-size="8.00">runtime</text>
<text text-anchor="middle" x="566" y="-580.6" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="566" y="-571.6" font-family="Times,serif" font-size="8.00">0 of 80ms (100%)</text>
</a>
</g>
</g>
<!-- N2&#45;&gt;N1 -->
<g id="edge1" class="edge">
<title>N2&#45;&gt;N1</title>
<g id="a_edge1"><a xlink:title="runtime.main &#45;&gt; main.main (80ms)">
<path fill="none" stroke="#b20000" stroke-width="6" d="M566,-564.47C566,-541.85 566,-501.64 566,-474.64"/>
<polygon fill="#b20000" stroke="#b20000" stroke-width="6" points="571.25,-474.32 566,-464.32 560.75,-474.32 571.25,-474.32"/>
</a>
</g>
<g id="a_edge1&#45;label"><a xlink:title="runtime.main &#45;&gt; main.main (80ms)">
<text text-anchor="middle" x="588" y="-485.8" font-family="Times,serif" font-size="14.00"> 80ms</text>
</a>
</g>
</g>
<!-- N3 -->
<g id="node3" class="node">
<title>N3</title>
<g id="a_node3"><a xlink:title="bufio.(*Reader).Read (30ms)">
<polygon fill="#eddbd5" stroke="#b22d00" points="631.5,-243 434.5,-243 434.5,-131 631.5,-131 631.5,-243"/>
<text text-anchor="middle" x="533" y="-219.8" font-family="Times,serif" font-size="24.00">bufio</text>
<text text-anchor="middle" x="533" y="-193.8" font-family="Times,serif" font-size="24.00">(*Reader)</text>
<text text-anchor="middle" x="533" y="-167.8" font-family="Times,serif" font-size="24.00">Read</text>
<text text-anchor="middle" x="533" y="-141.8" font-family="Times,serif" font-size="24.00">30ms (37.50%)</text>
</a>
</g>
</g>
<!-- N4&#45;&gt;N3 -->
<g id="edge3" class="edge">
<title>N4&#45;&gt;N3</title>
<g id="a_edge3"><a xlink:title="main.readbyte &#45;&gt; bufio.(*Reader).Read (30ms)">
<path fill="none" stroke="#b22d00" stroke-width="2" d="M561.95,-309.96C558.54,-295.56 553.42,-273.99 548.43,-252.97"/>
<polygon fill="#b22d00" stroke="#b22d00" stroke-width="2" points="551.79,-251.98 546.07,-243.06 544.98,-253.6 551.79,-251.98"/>
</a>
</g>
<g id="a_edge3&#45;label"><a xlink:title="main.readbyte &#45;&gt; bufio.(*Reader).Read (30ms)">
<text text-anchor="middle" x="576" y="-264.8" font-family="Times,serif" font-size="14.00"> 30ms</text>
</a>
</g>
</g>
<!-- N6 -->
<g id="node6" class="node">
<title>N6</title>
<g id="a_node6"><a xlink:title="runtime.newobject (30ms)">
<polygon fill="#eddbd5" stroke="#b22d00" points="826,-231 650,-231 650,-143 826,-143 826,-231"/>
<text text-anchor="middle" x="738" y="-212.6" font-family="Times,serif" font-size="18.00">runtime</text>
<text text-anchor="middle" x="738" y="-192.6" font-family="Times,serif" font-size="18.00">newobject</text>
<text text-anchor="middle" x="738" y="-172.6" font-family="Times,serif" font-size="18.00">10ms (12.50%)</text>
<text text-anchor="middle" x="738" y="-152.6" font-family="Times,serif" font-size="18.00">of 30ms (37.50%)</text>
</a>
</g>
</g>
<!-- N4&#45;&gt;N6 -->
<g id="edge4" class="edge">
<title>N4&#45;&gt;N6</title>
<g id="a_edge4"><a xlink:title="main.readbyte &#45;&gt; runtime.newobject (30ms)">
<path fill="none" stroke="#b22d00" stroke-width="2" d="M587.09,-309.96C609.34,-291.98 645.43,-262.81 676.75,-237.5"/>
<polygon fill="#b22d00" stroke="#b22d00" stroke-width="2" points="679.02,-240.17 684.59,-231.16 674.62,-234.72 679.02,-240.17"/>
</a>
</g>
<g id="a_edge4&#45;label"><a xlink:title="main.readbyte &#45;&gt; runtime.newobject (30ms)">
<text text-anchor="middle" x="668" y="-264.8" font-family="Times,serif" font-size="14.00"> 30ms</text>
</a>
</g>
</g>
<!-- N5 -->
<g id="node5" class="node">
<title>N5</title>
<g id="a_node5"><a xlink:title="runtime.mallocgc (20ms)">
<polygon fill="#edddd5" stroke="#b23c00" points="830.5,-80 645.5,-80 645.5,0 830.5,0 830.5,-80"/>
<text text-anchor="middle" x="738" y="-58.4" font-family="Times,serif" font-size="22.00">runtime</text>
<text text-anchor="middle" x="738" y="-34.4" font-family="Times,serif" font-size="22.00">mallocgc</text>
<text text-anchor="middle" x="738" y="-10.4" font-family="Times,serif" font-size="22.00">20ms (25.00%)</text>
</a>
</g>
</g>
<!-- N6&#45;&gt;N5 -->
<g id="edge5" class="edge">
<title>N6&#45;&gt;N5</title>
<g id="a_edge5"><a xlink:title="runtime.newobject &#45;&gt; runtime.mallocgc (20ms)">
<path fill="none" stroke="#b23c00" stroke-width="2" d="M738,-142.89C738,-126.43 738,-107.55 738,-90.54"/>
<polygon fill="#b23c00" stroke="#b23c00" stroke-width="2" points="741.5,-90.24 738,-80.24 734.5,-90.24 741.5,-90.24"/>
</a>
</g>
<g id="a_edge5&#45;label"><a xlink:title="runtime.newobject &#45;&gt; runtime.mallocgc (20ms)">
<text text-anchor="middle" x="760" y="-101.8" font-family="Times,serif" font-size="14.00"> 20ms</text>
</a>
</g>
</g>
</g>
</g></svg>
